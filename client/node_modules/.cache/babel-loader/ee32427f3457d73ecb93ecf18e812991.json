{"ast":null,"code":"import \"firebase/compat/auth\"; //v9\n\nimport \"firebase/compat/firestore\"; //v9\n// Import the functions you need from the SDKs you need\n\nimport firebase from \"firebase/compat/app\"; //v9\n\nconst config = {\n  apiKey: \"AIzaSyCfyUBUW2GCGttogkiqHj5Lj_A5A3de29k\",\n  authDomain: \"crwn-db-221cb.firebaseapp.com\",\n  projectId: \"crwn-db-221cb\",\n  storageBucket: \"crwn-db-221cb.appspot.com\",\n  messagingSenderId: \"14793078040\",\n  appId: \"1:14793078040:web:55c1206510c4032a065a6d\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exisits) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"eror creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; //to add our shop data into firebase\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accomulator, collection) => {\n    accomulator[collection.title.toLowerCase()] = collection;\n    return accomulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unSubscribe = auth.onAuthStateChanged(async userAuth => {\n      unSubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nconst firebaseApp = firebase.initializeApp(config);\nexport const auth = firebaseApp.auth();\nexport const firestore = firebaseApp.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/mac/development /practice/wear/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exisits","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accomulator","getCurrentUser","Promise","resolve","reject","unSubscribe","auth","onAuthStateChanged","firebaseApp","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAO,sBAAP,C,CAA+B;;AAC/B,OAAO,2BAAP,C,CAAoC;AAEpC;;AACA,OAAOA,QAAP,MAAqB,qBAArB,C,CAA4C;;AAE5C,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,SAAS,EAAE,eAHE;AAIbC,EAAAA,aAAa,EAAE,2BAJF;AAKbC,EAAAA,iBAAiB,EAAE,aALN;AAMbC,EAAAA,KAAK,EAAE;AANM,CAAf;AASA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,OAAd,EAAuB;AACrB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAK,CAACG,OAAxC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CArBM,C,CAuBP;;AACA,OAAO,MAAMgB,yBAAyB,GAAG,OACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACD,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACD,CAbM;AAeP,OAAO,MAAMC,8BAA8B,GAAIC,WAAD,IAAiB;AAC7D,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAsB5B,GAAD,IAAS;AAC1D,UAAM;AAAE6B,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmB9B,GAAG,CAAC+B,IAAJ,EAAzB;AAEA,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAEnC,GAAG,CAACmC,EAFH;AAGLN,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAT6B,CAA9B;AAUA,SAAOJ,qBAAqB,CAACU,MAAtB,CAA6B,CAACC,WAAD,EAAcnB,UAAd,KAA6B;AAC/DmB,IAAAA,WAAW,CAACnB,UAAU,CAACW,KAAX,CAAiBK,WAAjB,EAAD,CAAX,GAA8ChB,UAA9C;AACA,WAAOmB,WAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAfM;AAiBP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,WAAW,GAAGC,IAAI,CAACC,kBAAL,CAAwB,MAAOhD,QAAP,IAAoB;AAC9D8C,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAAC5C,QAAD,CAAP;AACD,KAHmB,EAGlB6C,MAHkB,CAApB;AAID,GALM,CAAP;AAMD,CAPM;AASP,MAAMI,WAAW,GAAG1D,QAAQ,CAAC2D,aAAT,CAAuB1D,MAAvB,CAApB;AACA,OAAO,MAAMuD,IAAI,GAAGE,WAAW,CAACF,IAAZ,EAAb;AACP,OAAO,MAAM5C,SAAS,GAAG8C,WAAW,CAAC9C,SAAZ,EAAlB;AACP,OAAO,MAAMgD,cAAc,GAAG,IAAI5D,QAAQ,CAACwD,IAAT,CAAcK,kBAAlB,EAAvB;AACPD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMR,IAAI,CAACS,eAAL,CAAqBL,cAArB,CAA/B;AACP,eAAe5D,QAAf","sourcesContent":["import \"firebase/compat/auth\"; //v9\nimport \"firebase/compat/firestore\"; //v9\n\n// Import the functions you need from the SDKs you need\nimport firebase from \"firebase/compat/app\"; //v9\n\nconst config = {\n  apiKey: \"AIzaSyCfyUBUW2GCGttogkiqHj5Lj_A5A3de29k\",\n  authDomain: \"crwn-db-221cb.firebaseapp.com\",\n  projectId: \"crwn-db-221cb\",\n  storageBucket: \"crwn-db-221cb.appspot.com\",\n  messagingSenderId: \"14793078040\",\n  appId: \"1:14793078040:web:55c1206510c4032a065a6d\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  if (!snapShot.exisits) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"eror creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\n//to add our shop data into firebase\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  return transformedCollection.reduce((accomulator, collection) => {\n    accomulator[collection.title.toLowerCase()] = collection;\n    return accomulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unSubscribe = auth.onAuthStateChanged(async (userAuth) => {\n      unSubscribe();\n      resolve(userAuth);\n    },reject);\n  });\n};\n\nconst firebaseApp = firebase.initializeApp(config);\nexport const auth = firebaseApp.auth();\nexport const firestore = firebaseApp.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}